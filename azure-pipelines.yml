# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master

variables:
  terraformVersion: 0.12.26
  timeoutInMinutes: 60
  agentPool: 'ubuntu-18.04'
  build: $(Build.BuildNumber)
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  action:

parameters:
  - name: environment_components
    type: object
    default:
    - deployment: 'cft_core'
      environment: 'prod'
      product: 'cft'
      component: 'core'
      service_connection: 'AzureDemo'
      storage_account_rg: 'platops-rg'
      storage_account_name: 'platopsstoragebase'
      dependsOn: 'Precheck'
      files_list: 'products/cft/core environments/cft/prod.tfvars'
      alwaysApply: true


stages:
  - stage: Precheck
    jobs:
      - job: Validate
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        pool:   
          vmImage: ${{ variables.agentPool }}
        steps: 
        - task: TerraformInstaller@0
          displayName: Terraform install
          inputs: 
            terraformVersion: ${{ variables.terraformVersion }}
        - task: AzureKeyVault@1
          displayName: Retrieve keyvault secret for ADO token
          inputs:
            ConnectedServiceName: 'AzureDemo'
            keyVaultName: platops-kv
            secretsFilter: 'azure-devops-token'
            runAsPreJob: false
        - task: PowerShell@2
          displayName: Run tests
          inputs:
            targetType: 'filePath'
            filePath: $(System.DefaultWorkingDirectory)/pipeline-scripts/pester-tests.ps1
            pwsh: true
        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            failTaskOnFailedTests: true
          condition: always()

  - ${{ each deployment in parameters.environment_components }}:
    - stage: ${{ deployment.deployment }}
      dependsOn: ${{ deployment.dependsOn }}
      jobs:
        - template: pipeline-templates/terraform.yaml
          parameters:       
            environment: ${{ deployment.environment }}
            component: ${{ deployment.component }}
            product: ${{ deployment.product }}
            service_connection: ${{ deployment.service_connection }}
            storage_account_rg: ${{ deployment.storage_account_rg }}
            storage_account_name: ${{ deployment.storage_account_name }}
            build: ${{ variables.build }}
            terraformVersion: ${{ variables.terraformVersion }}
            timeoutInMinutes: ${{ variables.timeoutInMinutes }}
            pool:   
              vmImage: ${{ variables.agentPool }}
            files_list: ${{ deployment.files_list }}
            alwaysApply: ${{ deployment.alwaysApply }}